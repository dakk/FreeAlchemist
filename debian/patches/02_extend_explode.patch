diff -Nur -x '*.orig' -x '*~' freealchemist-0.4//freealchemist.py freealchemist-0.4.new//freealchemist.py
--- freealchemist-0.4//freealchemist.py	2010-09-19 20:41:26.000000000 +0200
+++ freealchemist-0.4.new//freealchemist.py	2010-09-19 20:45:25.000000000 +0200
@@ -33,6 +33,8 @@
 import random
 
 width = 6
+size_x = 10
+size_y = 8
 
 class freealchemist:
 	def __init__(self):
@@ -95,9 +97,9 @@
 		# Riempie la griglia
 		self.grid = []
 
-		for x in xrange(10):
+		for x in xrange(size_x):
 			line = [] 
-			for y in xrange(8):
+			for y in xrange(size_y):
 				line.append(0)			
 			self.grid.append(line)
 
@@ -118,15 +120,19 @@
 
 		if random.randint(1,30) == 25: 
 			self.nextblock = [[random.randint(14,16),random.randint(1,self.lim)],[0,0]]
-		else:				
+		else:			
 			self.nextblock = [[random.randint(1,self.lim),random.randint(1,self.lim)],[0,0]]
 
-						
+	def onBoard(self, x, y):
+		return x >= 0 and x < len(self.grid) and y >= 0 and y < len(self.grid[0])
+
+	def test(self, x, y, dx1, dy1, dx2, dy2, t):
+		return self.onBoard(x+dx1,y+dy1) and self.onBoard(x+dx2,y+dy2) and self.grid[x+dx1][y+dy1] == t and self.grid[x+dx2][y+dy2] == t
 			
 	def updateGame(self):
 		# Controlla se ci son spazi vuoti da riempire
 		md = False
-		for x in xrange(len(self.grid)-1,0,-1):
+		for x in xrange(len(self.grid)-1,-1,-1):
 			for y in xrange(0, len(self.grid[0])):
 				s = 0
 				for a in xrange(len(self.grid)): s += self.grid[a][y]
@@ -141,8 +147,8 @@
 
 		# Controlliamo se possiamo far esplodere qualcosa :P
 		if not self.mov:
-			for x in xrange(-1,len(self.grid)-1):		
-				for y in xrange(-1,len(self.grid[0])-1):
+			for x in xrange(0,len(self.grid)):		
+				for y in xrange(0,len(self.grid[0])):
 					# La pressa
 					if self.grid[x][y] == 15 and x == len(self.grid)-2:
 							self.grid[len(self.grid)-2][y] = 0
@@ -156,38 +162,37 @@
 					# Bomba 1
 					elif self.grid[x][y] == 14:
 						self.grid[x][y] = 0
-						if y-1 != -1:			self.grid[x][y-1] = 0
-						if y+1 < len(self.grid[0]):	self.grid[x][y+1] = 0
-						if x+1 < len(self.grid): 	self.grid[x+1][y] = 0
-						if x-1 != -1:		 	self.grid[x-1][y] = 0
+						if self.onBoard (x,y-1):	self.grid[x][y-1] = 0
+						if self.onBoard (x,y+1):	self.grid[x][y+1] = 0
+						if self.onBoard (x+1,y): 	self.grid[x+1][y] = 0
+						if self.onBoard (x-1,y): 	self.grid[x-1][y] = 0
 
 					# Bomba 2
 					elif self.grid[x][y] == 16:
 						self.grid[x][y] = 0
-						if y-1 != -1:			self.grid[x][y-1] = 0
-						if y+1 < len(self.grid[0]):	self.grid[x][y+1] = 0
-						if x+1 < len(self.grid): 	self.grid[x+1][y] = 0
-						if x-1 != -1:		 	self.grid[x-1][y] = 0
-						if y-1 != -1 and x-1 != -1:					self.grid[x-1][y-1] = 0
-						if y+1 < len(self.grid[0]) and x+1 < len(self.grid):		self.grid[x+1][y+1] = 0
-						if x+1 < len(self.grid) and y-1 != -1: 				self.grid[x+1][y-1] = 0
-						if x-1 != -1 and y+1 < len(self.grid[0]):		 	self.grid[x-1][y+1] = 0
-						if y-2 != -2:			self.grid[x][y-2] = 0
-						if y+2 < len(self.grid[0]):	self.grid[x][y+2] = 0
-						if x+2 < len(self.grid): 	self.grid[x+2][y] = 0
-						if x-2 != -2:		 	self.grid[x-2][y] = 0
+						if self.onBoard (x,y-1):	self.grid[x][y-1] = 0
+						if self.onBoard (x,y+1):	self.grid[x][y+1] = 0
+						if self.onBoard (x+1,y):	self.grid[x+1][y] = 0
+						if self.onBoard (x-1,y):	self.grid[x-1][y] = 0
+						if self.onBoard (x-1,y-1):	self.grid[x-1][y-1] = 0
+						if self.onBoard (x+1,y+1):	self.grid[x+1][y+1] = 0
+						if self.onBoard (x+1,y-1):	self.grid[x+1][y-1] = 0
+						if self.onBoard (x-1,y+1):	self.grid[x-1][y+1] = 0
+						if self.onBoard (x,y-2):	self.grid[x][y-2] = 0
+						if self.onBoard (x,y+2):	self.grid[x][y+2] = 0
+						if self.onBoard (x+2,y):	self.grid[x+2][y] = 0
+						if self.onBoard (x-2,y):	self.grid[x-2][y] = 0
 
 
 					# Normale
 					elif self.grid[x][y] != 0 and self.grid[x][y] < 13:
 						t = self.grid[x][y]
-						if (self.grid[x][y+1] == t and self.grid[x][y-1] == t) or (self.grid[x+1][y] == t and self.grid[x-1][y] == t) or (self.grid[x+1][y] == t and self.grid[x][y+1] == t) or (self.grid[x-1][y] == t and self.grid[x][y-1] == t)  or (self.grid[x-1][y] == t and self.grid[x][y+1] == t) or (self.grid[x+1][y] == t and self.grid[x][y-1] == t): 
-								if self.grid[x][y] < 12: self.grid[x][y] += 1
+						if self.test (x, y, 0, 1, 0, -1, t) or self.test (x, y, 1, 0, -1, 0, t) or self.test (x, y, 1, 0, 0, 1, t) or self.test (x, y, -1, 0, 0, -1, t) or self.test (x, y, -1, 0, 0, 1, t) or self.test (x, y, 1, 0, 0, -1, t):
+								#upgrade our center piece
+								if t < 12: self.grid[x][y] += 1
 								else: self.grid[x][y] = 0
-								if self.grid[x][y+1] == t: self.grid[x][y+1] = 0
-								if self.grid[x][y-1] == t: self.grid[x][y-1] = 0
-								if self.grid[x+1][y] == t: self.grid[x+1][y] = 0
-								if self.grid[x-1][y] == t: self.grid[x-1][y] = 0
+								#explode the touching pieces
+								self.explode(x,y,t)
 								self.points += (t*10)+t*t
 
 						if t-1 > self.lim and t-1 < 13: self.lim += 1
@@ -204,7 +209,23 @@
 			elif sum(self.grid[1]) > 0: self.fail += 1
 			else: self.fail = 0 
 		if self.fail > 2: self.over = True
-
+		
+	
+	#Explode the piece at position x,y if type == t
+	#and also explode all touching pieces of the same type.
+	def explode(self,x,y,t) :
+		if self.grid[x][y] == t :
+			self.grid[x][y] = 0
+		#recursively explode touching pieces of the same type
+		if (y > 0) :
+			if self.grid[x][y-1] == t: self.explode(x,y-1,t)
+		if (y < len(self.grid[0])-1) :
+			if self.grid[x][y+1] == t: self.explode(x,y+1,t)
+		if (x > 0) :
+			if self.grid[x-1][y] == t: self.explode(x-1,y,t)
+		if  (x < len(self.grid)-1) :
+ 			if self.grid[x+1][y] == t: self.explode(x+1,y,t)
+		
 
 
 	def renderGame(self):
